# Gradle 다운 => GRADLE_HOME으로 환경변수 맞춰주기 (bin 전 경로까지) => 사용자 변수 중 Path에서 %GRADLE_HOME%\bin 추가
# Spring Starter Project 생성
# build.gradle 설정 추가

bootRun {
    jvmArgs = ["-Dfile.encoding=UTF-8", "-Duser.timezone=GMT+09:00"]
}

war {
	enabled = true
	archiveVersion = "1.0-" + new Date().format('yyyyMMdd-HHmmss')
}


# 필요 라이브러리 추가

# DB 연동
* application.properties에서 DB 설정 추가
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/{$schema_name}?useSSL=false&serverTimezone=Asia/Seoul
spring.datasource.username={$username}
spring.datasource.password={$password}

# Spring boot에서 jsp 파일 사용 가능하게 설정
* jstl, jasper 라이브러리 추가
* application.properties에 설정 추가
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

# jsp 폴더 경로 만들기
main/webapp/WEB-INF/views

### java -> Editor 설정 알아보기
** Content Assist => Advenced
** Templetes
** Save Actions

# java 파일로 Config 설정 파일 만들기

* 의존성 주입
- 스프링은 클래스에서 객체를 생성하고, 객체들의 의존성에 대한 처리 작업까지 내부에서 모든 것이 처리됨
- 스프링에서 관리되는 객체를 '빈(Bean)' 이라고 하고, 이에 대한 설정은 XML과 Java 를 이용해서 처리할 수 있음
- 기존 시스템은 XML을 선호하지만, 최근에는 Java를 이용하는 설정도 많이 사용되고 있음

1) config 패키지에서 RootConfig 클래스 생성 (RootConfig 클래스는 스프링이 동작하면서 필요한 객체들을 생성하는 역할을 함)
- @Configuration : 스프링 프레임워크가 동작하면서 RootConfig 클래스가 스프링 내에 객체(빈) 들을 설정한 정보를 가지고 있다는 것을 표시
- @ComponentScan : basePackages라는 속성값을 이용해 domain 패키지의 클래스들을 조사




# JUnit5 설정

- 스프링 부트 스타터 (boot-starter-test)는 junit4에 대한 의존성을 가지고 있기 때문에 junit 제외
=> implementation ('org.springframework.boot:spring-boot-starter-test') {
		exclude module: 'junit'
	}

- junit5에 대한 의존성 추가
implementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
implementation 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
implementation 'org.junit.vintage:junit-vintage-engine:5.3.1'
implementation 'org.junit.jupiter:junit-jupiter-params:5.3.1'


# DB 연동

1) JDBC 연동 후 테스트 코드 작성 (Gradle tasks => build 시 에러) (JDBCTest.java)
- JDBC 연결을 하려면 JDBC Driver가 필요
- JDBC 드라이버가 추가되었으면, 데이터베이스의 연결을 확인할 수 있게 테스트 코드 작성
- 스프링 설정 전 우선 Java와 JDBC 드라이버만을 이용해 테스트
- 데이터베이스 연결이 가능하다면 정상적으로 데이터베이스가 연결된 Connection 객체가 출력됨

2) 데이터베이스와 DataSource (RootConfig.java)
- 일반적으로 여러 명의 사용자를 동시에 처리해야 하는 웹 애플리케이션의 경우 데이터베이스 연결을 이용할 때는 '커넥션 풀(Connection Pool)'을 이용하므로, 스프링에 커넥션 풀을 등록해서 사용하는 것이 좋음
- Java 에서는 DataSource 라는 인터페이스를 통해 커넥션 풀을 사용
- DataSource 를 통해 매번 데이터베이스와 연결을 하는 방식이 아닌, 미리 연결을 맺어주고 반환하는 구조를 이용하여 성능 향상을 꾀함
- 커넥션 풀을 여러 종류가 있고, spring-jdbc 라이브러리를 이용하는 방식도 있지만, 최근 유행하는 HikariCP를 이용
- HikariCP는 스프링 부트 2.0 에서도 사용될 만큼 최근에 많이 사용되는 라이브러리
- HikariCP 라이브러리와 SLF4J 라이브러리와 같이 사용되므로, SLF4j 라이브러리 추가
- HikariCP에 대한 정보를 스프링에 등록하기 위해 XML을 이용할 수 있지만, 이전 예제에서 만들어둔 RootConfig를 이용해 HikariCP를 추가
- 선언된 메소드의 @Bean은 해당 메소드의 결과를 빈(객체)으로 등록할 때 사용하는 어노테이션
- dataSource()의 리턴 타입은 DataSource 타입이고, 내부적으로 HikariDataSource 타입의 객체를 생성해서 반환하게 됨
- DataSource는 javax.sql 패키지에 포함되며, java 기반의 커넥션 풀들은 DataSource 인터페이스를 구현한 구현체임
- RootConfig에 추가한 DataSource 설정이 제대로 동작하는지 확인하는 작업 테스트하기

3) HikariCP 테스트 (HikariCPTests.java => 실행안됨)
- 테스트 클래스는 RootConfig를 이용해서 스프링 설정을 처리하고, 스프링의 빈으로 등록된 DataSource 타입의 객체를 주입받도록 설계
- Lombok을 이용해서 Setter 메소드를 작성하고, @Autowired를 이용해서 주입

4) MyBatis와 스프링 연동
- 흔히 'SQL 매핑(mapping) 프레임워크' 로 분류되는데, JDBC 코드의 복잡하고 지루한 작업을 피하는 용도로 많이 사용

* JDBC와 MyBatis의 차이점
- JDBC : 직접 Connection을 맺고 마지막 close() PreparedStatement 직접 생성 및 처리 PreparedStatement의 setXX() 등에 대한 모든 작업을 개발자가 처리
	 SELCT의 경우 직접 ResultSet 처리
- MyBatis : 자동으로 Connection close() 가능
	    MyBatis 내부적으로 PreparedStatement 처리 #{prop}와 같이 속성을 지정하면 내부적으로 자동으로 처리
	    리턴 타입을 지정하는 경우 자동으로 객체 생성 및 ResultSet 처리

# MyBatis 설정 및 연동

1) MyBatis 관련 라이브러리 추가
- mybatis, mybatis-spring : MyBatis와 스프링 연동용 라이브러리
- spring-tx, spring-jdbc : 스프링에서 데이터베이스 처리와 트랜잭션 처리

2) SQLSessionFactory (RootConfig.java)
- MyBatis에서 가장 핵심적인 객체는 SQLSession 이라는 존재와 SQLSessionFactory
- SQLSessionFactory의 이름에서 보듯이 내부적으로 SQLSession 이라는 것을 만들어 내는 존재, 개발시에는 SQLSession을 통해 원하는 SQL을 전달하고, 결과를 리턴 받는 구조로 작성
- SQLSessionFactory 타입 자체는 MyBatis에 속하고 sqlSessionFactory()에서 사용하는 SqlSessionFactoryBean은 MyBatis-Spring 모듈에서 가져다가 사용하게 됨
- SQLSessionFactory를 생성하기 위해 반드시 DataSource 타입의 객체가 필요한데, 위에 작성한 dataSource()를 이용
- resources에 있는 mapper xml을 사용하기 위해 ApplicationContext 인터페이스를 통해 경로를 지정해줌

3) 스프링과의 연동 처리
- SQLSessionFactory를 이용해 코드를 작성해도 JDBC 처리가 가능하지만, 좀 더 편하게 작업하기 위해 SQL을 어떻게 처리할 것인지를 별도의 설정을 분리하고, 자동으로 처리되는 방식을 이용
- MyBatis의 Mapper라는 존재를 작성
- Mapper를 작성했다면 MyBatis가 동작할 때 Mapper를 인식할 수 있도록 설정 (Rootconfig.java)
- Mapper 인터페이스는 별도 설정 없이 @MapperScan 어노테이션으로 Mapper 인터페이스가 존재하는 패키지 명을 지정해 주면 자동으로 Mapper 들을 스캔해 사용할 수 있으므로 별도 설정 없이 사용 가능

4) XML 매퍼와 같이 쓰기
- MyBatis를 이용해서 SQL을 처리할 때 어노테이션을 이용하는 방식이 압도적으로 편리하기는 하지만, SQL이 복잡하거나 기렁지는 경우에는 어노테이션보다 XML 을 이용하는 방식 선호
- MyBatis-Spring의 경우 Mapper 인터페이스와 XML을 동시에 이용할 수 있음
- XML을 작성해서 사용할 때에는 XML 파일의 위치와 XML 파일에 지정하는 namespace 속성이 중요한데, XML 파일 위치의 경우 Mapper 인터페이스가 있는 곳에 같이 작성하거나
  src/main/resources 폴더에 하위 폴더를 생성할 수 있음 (하나씩 폴더 생성)
- Mapper 인터페이스와 같은 이름을 이용하는 것이 가독성 높임
- XML 파일에는 MyBatis의 XML 메퍼에서 사용하는 태그에 대한 설정 필요
- XML 메퍼를 이용할 때 신경 써야할 부분은 <mapper> 태그의 namespace 속성값
- 위와 같이 *.*.mapper.TimeMapper 인터페이스가 존재하고,  XML의 <mapper namespace="*.*.mapper.TimeMapper> 와 같이 동일한 이름이 존재하면, 이를 병합해 처리
- 따라서 위의 경우는 메소드의 선언은 인터페이스에 존재하고, SQL에 대한 처리는 XML 을 이용하는 방식
- <select> 태그의 id 속성의 값은 메소드의 이름과 동일하게 맞춰야함, resultType속성은 인터페이스에 선언된 메소드의 리턴 타입과 동일하게 작성

5) log4jdbc-log4j2 설정
- MyBatis는 내부적으로 JDBC의 PreparedStatement를 이용해 SQL 을 처리, 따라서 SQL 에 전달되는 파라미터는 PreparedStatement를 이용하는 것과 동일하게 '?'로 치환돼 처리
- SQL에 전달되는 파라미터가 많은 경우에 '?'로 처리되는 값이 제대로 되었는지 확인하기 쉽지 않음
- 이런 문제를 해결하기 위해 SQL을 변환해서 로그를 출력하는 기능을 활용 (log4jdbc-log4j2 라이브러리 사용)
- 라이브러리 추가 후 로그 설정 파일을 추가하는 작업, JDBC의 연결 정보를 수정해야 함
- src/main/resources 밑에 log4jdbc.log4j2.properties 파일 추가 후 JDBC 드라이버와 연결 URL 변경
- RootConfig 클래스의 dataSource() 메소드의 setDriverClassName()과 setJdbcUrl() 부분 수정
- 설정 후 기존 테스트 코드를 실행해보면 이전과 달리 JDBC와 관련된 로그들이 출력됨

6) 로그 레벨 설정
- 테스트 코드를 실행하면 상당히 많은 양의 로그가 출력되기 때문에 개발 초기엔 좋지만 나중엔 불편해서 로그 레벨 수정 필요


# mybatis-config.xml 설정하기
- MyBatis는 SQL Mapping 프레임워크로 별도 설정 파일을 가질 수 있음
- src/main/resources에 mybatis-config.xml 파일 추가
1) XML과 DTD 선언
2) typeAlias 사용
- SQL Mapper 파일에서 parameterType이나 resultType을 지정할 때 긴 이름의 클래스명 대신 짧은 이름의 alias를 사용할 수 있음
3) 카멜 케이스 적용
- mapUnderscoreToCamelCase true 설정하면 데이터베이스 컬럼명이 REC_NO일 경우 recNo으로 자동 매핑됨
- jdbcTypeForNull NULL 설정하면 쿼리에 보내는 파라미터가 null인 경우 오류 발생하는 것을 방지

=> xml 설정 후  RootConfig에 SQLSessionFactory 설정에서 sessionFactory.setConfigLocation() set해주기!!


# Transaction 설정하기
- RootConfig 클래스에 @EnableTransactionManager 속성 추가, DataSourceTransactionManager 클래스에 txManager() 메소드 추가


# 스프링 MVC 프로젝트의 내부구조

- 예제에서 웹과 관련된 설정은 별도 ServletConfig 클래스 파일로 분리하고, RootConfig와 같이 분리된 구조 (Spring MVC - ServletConfig, Spring Core, MyBatis - RootConfig)
- 스프링 MVC 프로젝트를 구성해서 사용한다는 의미로 내부적으로는 Rootconfig와 같은 기본적 설정에 웹과 관련된 설정 (ServletConfig) 을 추가시켜 동작한다는 의미
- WebApplicationContext라는 존재는 기존 구조에 MVC 설정을 포함하는 구조로 만들어 짐

* 과거 구조 (Spring Legacy Project)
- 과거의 웹 애플리케이션은 web.xml을 이용해서 WebApplicationContext를 구동하는 방식 사용, WebApplicationContext 역시 web.xml 에서 서블릿의 listener를 이용해 구동시키는 방식으로 작성됨
- web.xml에서 root-context.xml의 설정을 로딩하고, Servlet 설정에서 servlet-context.xml을 로딩하는 방식
- Servlet 3.0 이상에서는 web.xml 대신 어노테이션 사용 가능, 스프링 MVC 역시 web.xml을 사용하는 대신 WebApplicationInitializer 라는 인터페이스를 구현하거나 하위 클래스를 이용해 web.xml을 대체

=> web.xml -> WebcConfig클래스, servlet-context.xml -> ServletConfig클래스, root-context.xml -> RootConfig클래스

* 차이점 (xml 방식 - 역할 - Java 설정 (Config))
1) web.xml - WebApplicationContext의 로딩 및 스프링 MVC 설정, 일반 스프링 설정 로딩 - WebApplicationInitializer 인터페이스의 구현/하위 클래스 상속
2) servlet-context.xml - 스프링 MVC의 고유 설정 - 별도의 Java 클래스로 구현 (ServletConfig 클래스)
3) root-context.xml - 일반 스프링 객체들의 설정 - RootConfig 클래스로 처리


# Java Config 전환

- 스프링 MVC를 이용하기 위해 build.gradle 파일에 spring-webmvc 관련 라이브러리를 추가

1) ServletConfig 클래스 작성 (웹과 관련된 설정)
- ServletConfig 클래스는 기존 스프링 MVC 관련 기본적 설정을 추가 (WebMvcConfigurer 라는 인터페이스를 상속하는 형태로 구현)
- WebMvcConfigurer 라는 인터페이스를 상속하는 것만으로 해당 클래스가 스프링 MVC관련 설정이라는 것을 명시 (경우에 따라서 @EnableWebMvc 라는 어노테이션을 지정하는 방식을 사용하기도 함)
- 화면 처리하는 방식의 설정, 정적인 자원들의 기본 경로 지정 설정
- 여러 메소드 중 configureViewResolvers()는 JSP나 Thymeleaf와 같은 View와 관련된 기술들을 어떻게 처리할 것인지 지정
- addResourceHandlers()는 주로 이미지나 .js파일, .css파일과 같이 정적인 자원들의 경로를 지정하는 역할

2) web.xml 대신하기 (WebConfig.java 작성)

* web.xml의 내용
1) 스프링 설정 파일 위치 지정
2) 스프링 설정 파일 로딩을 위한 리스너
3) Front Controller 설정
4) Front Controller에 대한 URL 설정

- web.xml 없이 스프링 MVC를 구동하려면 스프링에서 제공하는 WebApplicationInitializer 인터페이스를 구현하거나 하위 클래스를 이용해야 함
- 예제에서는 WebApplicationInitializer인터페이스를 구현한 클래스 중 AbstractAnnotationConfigDispatcherServletInitializer클래스 상속시켜 구현
- AbstractAnnotationConfigDispatcherServletInitializer클래스는 추상클래스이므로 필요한 몇 개의 메소들를 재정의 해야함
* 재정의해야할 메소드
- 일반 스프링 설정 정보를 가진 클래스를 반환하는 getRootConfigclasses() => 리턴시 RootConfig.class를 반환
- 스프링 MVC의 설정 클래스를 반환하는 getServletConfigClasses() => 리턴시 ServletConfig.class를 반환
- Front Controller의 경로를 지정하는 getServletMappings() => '/'경로 이용



# 스프링 컨트롤러 만들기
- 컨트롤러를 스프링 MVC에서 빈(Bean)으로 인식하기 위해 ServletConfig 클래스를 이용해 @Controller 어노테이션을 인식하도록 수정
- @ComponentScan은 RootConfig 클래스와 마찬가지로 해당 패키지의 내용을 스캔하면서 스프링 관련 어노테이션들이 적용된 클래스들을 찾아 스프링에 빈으로 등록하는 역할
- jsp 설정 경로에 jsp 파일 생성 후 테스트


# 스프링 MVC Controller의 어노테이션
- 스프링 MVC의 Controller들은 기본적으로 @Controller 또는 @RestController 어노테이션을 클래스 선언부에 지정
- @Controler : 일반적인 웹을 구현하기 위한 어노테이션으로 JSP 등을 이용할 경우 사용
- @RestController : 해당 클래스의 모든 메소드는 주로 XML이나 JSON과 같은 데이터를 처리하기 위해 사용

* @RequestMapping 어노테이션
- 프로젝트에서 생성하는 모든 Controller들은 @RequestMapping 이라는 어노테이션을 사용할 수 있음 (@RequestMapping을 클래스 선언부에 적용한다는 의미가 Controller의 기본 경로를 지정한다는 의미)
- 클래스 선언부에 적용하는 경우는 폴더와 같은 개념으로 기본 경로로 동작, 메소드에 적용하는 경우는 파일과 같이 최종적인 경로가 됨

* Controller 등록
- 스프링 MVC에서 빈을 등록 (ServletConfig 클래스에 @ComponentScan을 이용)

# Model 타입
- Controller를 작성시 파라미터를 지정할 때 가장 중요한 용도는 전달되는 파라미터를 수집하거나 변환하는 일이지만, Model 이라는 특별한 파라미터를 지정하는 경우가 많음
- Model은 전달되는 파라미터를 처리하기 위한 용도가 아니라 원하는 데이터를 View까지 전달하기 위한 용도
- Model은 요청된 데이터가 아니라 서비스 객체등을 이용해 얻어내는 추가적인 데이터를 처리하기 위함임, 마지막 내용물을 Model에 담아서 전달하는 방식

# Controller 메소드의 리턴 타입
- Controller에서 작성하는 메소드의 리턴타입은 크게 void, String, 사용자 정의 객체 타입으로 볼 수 있음

1) void를 사용하는 경우
- 메소드의 리턴 타입을 void로 지정하게 되면 메소드를 호출하는 URL 경로에 맞는 JSP파일을 사용하게 됨
- 보통 입력페이지와 같이 동일한 View를 이용하는 경우에 많이 사용

2) String을 사용하는 경우
- 처리 결과에 따라 View가 달라지는 경우 (ex: 로그인에 성공한 사용자와 로그인에 실패한 사용자가 보는 View가 달라질 필요가 있는 경우)
- Controller의 기본 경로는 적용되지 않으므로 경로를 직접 문자열로 추가해 주어야함 (return "/sample/login")
- String의 경우 'redirect', 'forward' 라는 특별한 접두사를 조금 다른 방식으로 동작하게 됨
- 'redirect....'로 시작하는 경우는 내부적으로 response.sendRedirect()에 해당하는 동작을 수행하게 됨
- 'forward:'는 기본적으로 URL은 고정되고, 서버의 내부에서 다른 URL을 호출하게 됨, 브라우저는 최종적인 결과만을 보기 때문에 redirect와 달리 브라우저는 한번에 결과만을 받게 됨

3) RedirectAttributes
- redirect 방식의 경우 항상 문제가 되는 것은 메소드에서 전달받은 파라미터를 다른 곳으로 전송하는데 문제가 있음
- 예를 들어 '/sample/move2?id=aaa'와 같이 파라미터를 전달했을때 redirect 되면 id 파라미터는 제대로 전송되지 못하게 됨
- 해결방법은 직접 URL 뒤에 문자열을 추가하거나, RedirectAttributes를 이용하면 좀 더 깔끔하게 처리할 수 있음
- RedirectAttributes의 addAttribute()는 redirect 상황에서 파라미터를 자동으로 URL 뒤에 붙여주는 방식으로 동작
- RedirectAttributes의 addFlashAttributes() 라는 메소드는 URL에는 보이지 않고, View에서만 처리가 가능한 메소드, 결과는 오직 View에서만 조회 가능


# Controller의 Exception 처리



## bootstrap, jQuery 세팅
- 부트스트랩, jQuery 홈페이지에서 min.js 다운로드
- 리소스 맵핑 하기 (ServletConfig 클래스에서 addResourceHandlers메소드 경로 설정)
- resources 폴더 안에 넣고, <head>쪽에 <script src=""> 넣어주기 / css는 <link rel="stylesheet" href=""> 로 설정

# log 파일 만들기


=======================================================================================================
# GitHub에 프로젝트 올리기
1) github에 로그인 후 프로젝트 생성
2) 원하는 프로젝트 경로로 이동
3) git init
4) git status 후 git add .
5) git commit -m "[commit message]"
6) 자신이 올릴 깃 repository 주소 복사 후 git remote add origin [repository주소]
7) repository저장소와 연결 확인 (git remote -v)
8) git push origin master (프로젝트 git 프로젝트에 push)
=======================================================================================================
